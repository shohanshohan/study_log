ls: 列出目录
选项与参数：
-a  ：全部的文件，连同隐藏文件（ 开头为 . 的文件） 一起列出来（常用）
-A  ：全部的文件，连同隐藏文件，但不包括 . 与 .. 这两个目录
-d  ：仅列出目录本身，而不是列出目录内的文件数据（常用）
-f  ：直接列出结果，而不进行排序 （ls 默认会以文件名排序！）
-F  ：根据文件、目录等信息，给予附加数据结构，例如：
      *:代表可可执行文件； /:代表目录； =:代表 socket 文件； &#124;:代表 FIFO 文件；
-h  ：将文件大小以人类较易读的方式（例如 GB, KB 等等）列出来；
-i  ：列出 inode 号码，inode 的意义下一章将会介绍；
-l  ：长数据串行出，包含文件的属性与权限等等数据；（常用）
-n  ：列出 UID 与 GID 而非使用者与群组的名称 （UID与GID会在帐号管理提到！）
-r  ：将排序结果反向输出，例如：原本文件名由小到大，反向则为由大到小；
-R  ：连同子目录内容一起列出来，等于该目录下的所有文件都会显示出来；
-S  ：以文件大小大小排序，而不是用文件名排序；
-t  ：依时间排序，而不是用文件名。

cd（Change Directory的缩写）：切换目录
cd ~ 表示回到自己的家目录，即/root目录
cd .. 表示去到目前的上一级目录

pwd：显示目前的目录


mkdir：创建一个新的目录
mkdir [-mp] 目录名称
选项与参数：
-m ：配置文件的权限喔！直接配置，不需要看默认权限 (umask) 的脸色～！创建权限为rwx--x--x的目录 mkdir -m 711 testdir
-p ：帮助你直接将所需要的目录(包含上一级目录)递归创建起来！加了这个 -p 的选项，可以自行帮你创建多层目录！mkdir -p test1/test2/test3,


rmdir：删除一个空的目录
rmdir -p dir_name  //-p ：连同上一级『空的』目录也一起删除
rm -r：删除非空目录 rm -r testdir
创建文件：touch file_name


cp: 复制文件或目录
选项与参数：
-a：相当於 -pdr 的意思，至於 pdr 请参考下列说明；(常用)
-d：若来源档为连结档的属性(link file)，则复制连结档属性而非文件本身；
-f：为强制(force)的意思，若目标文件已经存在且无法开启，则移除后再尝试一次；
-i：若目标档(destination)已经存在时，在覆盖时会先询问动作的进行(常用)
-l：进行硬式连结(hard link)的连结档创建，而非复制文件本身；
-p：连同文件的属性一起复制过去，而非使用默认属性(备份常用)；
-r：递归持续复制，用於目录的复制行为；(常用)
-s：复制成为符号连结档 (symbolic link)，亦即『捷径』文件；
-u：若 destination 比 source 旧才升级 destination ！
cp -i ~/.test /tmp/test


rm: 移除文件或目录 rm [-fir] 文件或目录
选项与参数：
-f ：就是 force 的意思，忽略不存在的文件，不会出现警告信息；
-i ：互动模式，在删除前会询问使用者是否动作
-r ：递归删除啊！最常用在目录的删除了！这是非常危险的选项！！！


mv (移动文件与目录，或修改名称)
mv file_name new_name //修改名称
复制移动到目录：
cp test.php test1.php
mkdir test
mv test1.php test





显示当前目录下非隐藏文件与目录：ls


查看文件全部内容：	cat filename  //一般用于查看文件内容很少的文件


分页浏览文件内容：	more filename （空格显示下一页，回车显示下一行，Q退出）


显示一个文件的属性以及文件所属的用户和组：ll 或者 ls -l
显示如：
drwxr-xr-x 2 root root 4096 Nov 27 11:52 bin
drwxrwxrwt 9 root root 4096 Nov 27 16:39 tmp
...........
解析：
bin文件的第一个属性用"d"表示。"d"在Linux中代表该文件是一个目录文件。
当为[ d ]则是目录
当为[ - ]则是文件；
若是[ l ]则表示为链接文档(link file)；
若是[ b ]则表示为装置文件里面的可供储存的接口设备(可随机存取装置)；
若是[ c ]则表示为装置文件里面的串行端口设备，例如键盘、鼠标(一次性读取装置)。

接下来的字符中，以三个为一组，且均为『rwx』 的三个参数的组合。其中，[ r ]代表可读(read)、[ w ]代表可写(write)、[ x ]代表可执行(execute)。 要注意的是，这三个权限的位置不会改变，如果没有权限，就会出现减号[ - ]而已。
每个文件的属性由左边第一部分的10个字符来确定（如下图）。
文件类型 | 属主权限  | 属组权限  | 其它用户权限 |
    0	 |  1  2  3  |  4  5  6  |   7  8  9    |
    d    |  r  w  x  |  r  -  x  |   r  -  x    |
目录文件 | 读 写 执行| 读 写 执行|  读  写  执行|

从左至右用0-9这些数字来表示。
第0位确定文件类型，第1-3位确定属主（该文件的所有者）拥有该文件的权限。
第4-6位确定属组（所有者的同组用户）拥有该文件的权限，第7-9位确定其他用户拥有该文件的权限。
其中，第1、4、7位表示读权限，如果用"r"字符表示，则有读权限，如果用"-"字符表示，则没有读权限；
第2、5、8位表示写权限，如果用"w"字符表示，则有写权限，如果用"-"字符表示没有写权限；第3、6、9位表示可执行权限，如果用"x"字符表示，则有执行权限，如果用"-"字符表示，则没有执行权限。Linux系统按文件所有者、文件所有者同组用户和其他用户来规定了不同的文件访问权限
后面数字代表该文件目录包含几个目录（包括自己），如果是单个文件则表式这个文件所具有的硬链接数,即这个文件总共有多少个文件名
root root分别表示属主和属组(文件拥有者所在的组)名称。
4096一串数字表示文件表示文件大小(以字节为单位),如果是一个文件夹,则表示该文件夹的大小.请注意是文件夹本身的大小,而不是文件夹以及它下面的文件的总大小!
接下来是：文件创建月份(Nov表示十一月份)，文件创建日期，时间，最后文件名


更改文件属性: chown
如：将test.php的拥有者root改为shohan
cd /var/www
chown shohan test.php
将test.php的拥有者root和属组都改为shohan
chown shohan:shohan test.php
查看属性ll
chmod：更改文件9个属性
Linux文件属性有两种设置方法，一种是数字，一种是符号。
Linux文件的基本权限就有九个，分别是owner/group/others三种身份各有自己的read/write/execute权限。
这九个权限是三个三个一组的！其中，我们可以使用数字来代表各个权限，各权限的分数对照表如下：
r:4
w:2
x:1
每种身份(owner/group/others)各自的三个权限(r/w/x)分数是需要累加的，例如当权限为： [-rwxrwx---] 分数则是：
owner = rwx = 4+2+1 = 7
group = rwx = 4+2+1 = 7
others= --- = 0+0+0 = 0
所以我们设定权限的变更时，该文件的权限数字就是770啦！
变更权限的指令chmod的语法是这样的：chmod [-R] xyz 文件或目录（xyz代表各权限数字之和）
    1   |    2   |    3       |   4    |     5      |      6      |    7   |
 只执行 |  只写  | 可写可执行 |  只读  | 可读可执行 |  可读可写   |  全部  |

符号类型改变文件权限：
九个权限分别是(1)user (2)group (3)others三种身份，那么我们就可以藉由u, g, o来代表三种身份的权限！此外， a 则代表 all 亦即全部的身份！
chmod u=rwx,g=rx,o=r  test1    // 修改 test1 权限

可以使用 man [命令] 来查看各个命令的使用文档，如 ：man cp。
























