从 PHP 5.4.0 起，PHP内置了Web服务器，这对于认为需要Apache或Nginx才能预览PHP应用的开发者来说是一个隐藏功能。
这个内置的Web服务器不应该用于生产环境，但对于本地开发来说是个极好的工具.可以快速地启动测试脚本

1、启动
这个内置的Web服务器很容易启动，打开终端（Windows下对应是cmd命令行），进入项目根目录，执行如下命令即可：
php -S localhost:8000
上述命令会新启动一个PHP Web服务器，地址是localhost，监听的端口是8000，当前所在目录就是这个Web服务器的根目录。
现在，打开浏览器，访问http://localhost:8000就可以预览应用了
有时候我们需要在同一局域网中的另一台设备中访问这个服务器（例如iPad或本地虚拟机），为此，我们可以把localhost换成0.0.0.0，让PHP Web服务器监听所有接口：
php -S 0.0.0.0:8000
要想停止Web服务器，可以关闭终端，也可以按Ctrl+C快捷键


2、配置
应用常常需要使用专属的PHP配置文件，尤其是对内存使用、文件上传、分析或对字节码缓存有特殊要求时，一定要单独配置，我们可以使用-c选项，
让PHP内置的服务器使用指定的配置文件：
php -S localhost:8000 -c app/config/php.ini


3、路由脚本
PHP内置服务器明显遗漏了一个功能：与Apache和Nginx不同，它不支持.htaccess文件，
因此，这个服务器很难使用多数流行的PHP框架中常见的前端控制器（单一入口文件index.php，用于转发所有HTTP请求，
现在主流PHP框架如Laravel、Symfony都是这样）。
PHP内置服务器使用路由脚本弥补了这一缺憾，处理每个HTTP请求前，会先执行这个路由脚本，
如果结果为false，返回当前HTTP请求中引用的静态资源URI，否则会把路由脚本的执行结果当做HTTP响应主体返回。
换句话说，路由脚本的作用其实和.htaccess一样。
路由脚本的用法很简单，只需要在启动PHP内置服务器时指定这个PHP脚本文件的路径即可：
php -S localhost:8000 router.php


4、判断函数
有时候需要知道PHP脚本使用的是PHP内置的Web服务器还是使用传统的Web服务器，这样方便我们为不同服务器设定不同的响应头。
我们可以使用php_sapi_name()函数检查使用的是哪个PHP Web服务器，
如果当前脚本使用的是PHP内置服务器，则该函数返回字符串cli-server：
<?php
if (php_sapi_name() == ‘cli-server') {
    // PHP 内置 Web 服务器
} else {
    // 其他Web服务器
}


5、缺点
PHP内置的Web服务器不能在生成环境使用，只能在本地开发环境中使用，这是因为其相比Apache或Nginx有诸多不足：
性能不佳。一次只能处理一个请求，其他请求会受到阻塞。如果某个进程耗时较长（数据库查询、远程API调用），则整个Web应用会陷入停顿状态。
支持媒体类型较少（这一点PHP 5.5.7以后有较大改进）。
路由脚本仅支持少量的URL重写，更高级则还是需要Apache或Nginx

