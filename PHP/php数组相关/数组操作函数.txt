1）array_change_key_case() 函数将数组的所有的键都转换为大写字母或小写字母。
$age=array("Bill"=>"60","Steve"=>"56","Mark"=>"31");
print_r(array_change_key_case($age,CASE_UPPER)); // Array ( [BILL] => 60 [STEVE] => 56 [MARK] => 31 )
如果转化为小写，则 print_r(array_change_key_case($age, CASE_LOWER)); //Array ( [bill] => 60 [steve] => 56 [mark] => 31 )



2）array_chunk(array,size,preserve_key) 函数把数组分割为新的数组块。
返回一个多维的索引数组，从 0 开始，每个维度都包含 size 个元素。
参数	        描述
array	        必需。规定要使用的数组。
size	        必需。整数值，规定每个新数组包含多少个元素。
preserve_key	可选。可能的值：
              true - 保留原始数组中的键名。
              false - 默认。每个结果数组使用从零开始的新数组索引。
$age=array("Bill"=>"60","Steve"=>"56","Mark"=>"31","David"=>"35");
print_r(array_chunk($age,2,true)); 
结果：
Array ( 
        [0] => Array ( [Bill] => 60 [Steve] => 56 ) 
        [1] => Array ( [Mark] => 31 [David] => 35 )
      )   
print_r(array_chunk($age,2)); //如果第三个参数不设置为true,则默认填充数字索引：
Array ( 
        [0] => Array ( [0] => 60 [1] => 56 ) 
        [1] => Array ( [0] => 31 [1] => 35 ) 
      )
      
      
3）array_column(array,column_key,index_key) 返回输入数组中某个单一列的值。
参数	          描述
array	          必需。规定要使用的多维数组（记录集）。
column_key	    必需。需要返回值的列。
                  可以是索引数组的列的整数索引，或者是关联数组的列的字符串键值。
                  该参数也可以是 NULL，此时将返回整个数组（配合 index_key 参数来重置数组键的时候，非常有用）。
index_key	      可选。用作返回数组的索引/键的列。
例子：
$a = array(
  array(
    'id' => 5698,
    'first_name' => 'Bill',
    'last_name' => 'Gates',
  ),
  array(
    'id' => 4767,
    'first_name' => 'Steve',
    'last_name' => 'Jobs',
  )
  array(
    'id' => 3809,
    'first_name' => 'Mark',
    'last_name' => 'Zuckerberg',
  )
);

$last_names = array_column($a, 'last_name', 'id');
print_r($last_names); // Array ( [5698] => Gates [4767] => Jobs [3809] => Zuckerberg )

$names = array_column($a, NULL, 'id');
print_r($names); //这次将返回整个数组，但是索引是对应的id的值
Array
(
    [5698] => Array
        (
            [id] => 5698
            [first_name] => Bill
            [last_name] => Gates
        )
    [4767] => Array
        (
            [id] => 4767
            [first_name] => Steve
            [last_name] => Jobs
        )
    [3809] => Array
        (
            [id] => 3809
            [first_name] => Mark
            [last_name] => Zuckerberg
        )
)



4）array_combine(keys,values) 函数通过合并两个数组来创建一个新数组，其中的一个数组是键名，另一个数组的值为键值。
注！：键名数组和键值数组的元素个数必须相同！如果其中一个数组为空，或者两个数组的元素个数不同，则该函数返回 false。
参数	    描述
keys	    必需。键名数组。
values	  必需。键值数组。
$fname=array("Bill","Steve","Mark");
$age=array("60","56","31");

$c=array_combine($fname,$age);
print_r($c); // Array ( [Bill] => 60 [Steve] => 56 [Mark] => 31 )



5）array_count_values() 函数用于统计数组中所有值出现的次数。
本函数返回一个数组，其元素的键名是原数组的值，键值是该值在原数组中出现的次数。
$a=array("A","Cat","Dog","A","Dog");
print_r(array_count_values($a));// Array ( [A] => 2 [Cat] => 1 [Dog] => 2 )



6）array_diff(array1,array2,array3...) 函数返回两个数组的差集数组（只比较键值）。相反的 array_diff_key() 只比较键名
注！是比较第一个数组与其它数组的不同值，并返回第一个数组中与其它数组不同的键值对数组，在返回的数组中，键名保持不变。
$a1=array("a"=>"red","b"=>"green","c"=>"blue","d"=>"yellow","e"=>"color");
$a2=array("e"=>"red","f"=>"green","g"=>"blue","h"=>"white");
$result=array_diff($a1,$a2);
print_r($result); //Array ( [d] => yellow [e] => color )
print_r(array_diff_key($a1,$a2)); //Array ( [a] => red [b] => green [c] => blue [d] => yellow )
下面返回交集：
array_intersect() 函数用于比较两个（或更多个）数组的键值，并返回交集（只比较键值）。相反的 array_intersect_key() 只比较键名
$a1=array("a"=>"red","b"=>"white","c"=>"blue","d"=>"yellow");
$a2=array("e"=>"red","f"=>"green","g"=>"blue","h"=>"white");
$result=array_intersect($a1,$a2);
print_r($result); //Array ( [a] => red [b] => white [c] => blue )



7）array_diff_assoc() 函数用于比较两个（或更多个）数组的键名和键值 ，并返回差集（比较键值和键名）。并返回第一个数组中与其它数组不同的键值对数组
$a1=array("a"=>"red","b"=>"green","c"=>"blue","d"=>"yellow","e"=>"color");
$a2=array("e"=>"red","f"=>"green","g"=>"blue","h"=>"white");
$result=array_diff($a1,$a2);
print_r($result); // Array ( [a] => red [b] => green [c] => blue [d] => yellow [e] => color )
返回交集用：
array_intersect_assoc();（比较键值和键名）



8）array_fill(index,number,value);函数用给定的值填充数组，返回的数组有 number 个元素，值为 value。
返回的数组使用数字索引，从 start 位置开始并递增。如果 number 为 0 或小于 0，就会出错。
参数	      描述
index	      必需。被返回数组的第一个索引。
number	    必需。规定要插入的元素数。
value	      必需。规定供填充数组所使用的值。
$a1=array_fill(3,4,"blue");
print_r($a1); //Array ( [3] => blue [4] => blue [5] => blue [6] => blue )

array_fill_keys() 函数使用指定的键和值填充数组。
$keys=array("a","b","c","d");
$a1=array_fill_keys($keys,"blue");
print_r($a1); //Array ( [a] => blue [b] => blue [c] => blue [d] => blue )



9）array_filter() 函数用回调函数过滤数组中的值。
该函数把输入数组中的每个键值传给回调函数。如果回调函数返回 true，则把输入数组中的当前键值返回结果数组中。数组键名保持不变。
function var($var){
  return (int)$var > 0 ? true : false;
}
$a1=array("1","b",2,3,4,"2b");
print_r(array_filter($a1,"test_odd")); //Array ( [0] => 1 [2] => 2 [3] => 3 [4] => 4 [5] => 2b )


10）array_flip() 函数用于反转/交换数组中所有的键名以及它们关联的键值。
$a1=array("a"=>"red","b"=>"green","c"=>"blue","d"=>"yellow");
$result=array_flip($a1);
print_r($result); //Array ( [red] => a [green] => b [blue] => c [yellow] => d )



11）array_key_exists(key,array) 函数检查某个数组中是否存在指定的键名，如果键名存在则返回 true，如果键名不存在则返回 false。
参数	      描述
key	        必需。规定键名。
array	      必需。规定数组。
$a=array("Volvo"=>"XC90","BMW"=>"X5");
if (array_key_exists("Volvo",$a))
  {
  echo "键存在！";
  }
else
  {
  echo "键不存在！";
  }
  如果要检查某个数组中是否存在指定的键值呢？
  if (array_count_values($a)['XC90'] > 0)
  {
  echo "值存在！";
  }
else
  {
  echo "值不存在！";
  }
如果要检查数组中是否存在指定的键值，则使用 in_array($value,$array);



13）array_keys(array,value,strict) 函数返回包含数组中所有键名的一个新数组。
如果提供了第二个参数，则只返回键值为该值的键名。
参数	        描述
array	        必需。规定数组。
value	        可选。您可以指定键值，然后只有该键值对应的键名会被返回。
strict	      可选。与 value 参数一起使用。可能的值：
                true - 返回带有指定键值的键名。依赖类型，数字 5 与字符串 "5" 是不同的。
                false - 默认值。不依赖类型，数字 5 与字符串 "5" 是相同的。
$a=array("Volvo"=>"XC90","BMW"=>"X5","Toyota"=>"Highlander");
print_r(array_keys($a)); //Array ( [0] => Volvo [1] => BMW [2] => Toyota )
print_r(array_keys($a,'X5')); //Array ( [0] => BMW )

array_values(array) 函数返回一个包含给定数组中所有键值的数组，但不保留键名。
被返回的数组将使用数值键，从 0 开始并以 1 递增。
print_r(array_values($a)); //Array ( [0] => XC90 [1] => X5 [2] => Highlander )



14）array_map() 函数将用户自定义函数作用到数组中的每个值上，并返回用户自定义函数作用后的带有新值的数组。
回调函数接受的参数数目应该和传递给 array_map() 函数的数组数目一致。
提示：可以向函数输入一个或者多个数组。
function myfunction($v)
{
  return($v*$v);
}
$a=array(1,2,3,4,5);
print_r(array_map("myfunction",$a)); //Array ( [0] => 1 [1] => 4 [2] => 9 [3] => 16 [4] => 25 )

多个数组：
function myfunction($a, $b)
{
  return ($a==$b) ? $a*$b : ($a+$b);
}
$a=array(1,2,3,4,5);
$b = [1,2,5,4,6];
print_r(array_map("myfunction",$a,$b)); //Array ( [0] => 1 [1] => 4 [2] => 8 [3] => 16 [4] => 11 )



15）array_merge() 函数把一个或多个数组合并为一个数组。
注释：如果两个或更多个数组元素有相同的键名，则最后的元素会覆盖其他元素。
注释：如果您仅向 array_merge() 函数输入一个数组，且键名是整数，则该函数将返回带有整数键名的新数组，其键名以 0 开始进行重新索引
$a1=array("a"=>"red","b"=>"green");
$a2=array("c"=>"blue","b"=>"yellow");
print_r(array_merge($a1,$a2)); //Array ( [a] => red [b] => yellow [c] => blue )

$a=array(3=>"red",4=>"green");
print_r(array_merge($a)); //Array ( [0] => red [1] => green )

array_merge_recursive() 函数把一个或多个数组递归合并为一个数组，键名相同的会重新组一个新数组放一起,而不是覆盖
$a1=array("a"=>"red","b"=>"green");
$a2=array("c"=>"blue","b"=>"yellow");
print_r(array_merge_recursive($a1,$a2)); //Array ( [a] => red [b] => Array ( [0] => green [1] => yellow ) [c] => blue )



16）array_multisort(array1,sorting order,sorting type,array2,array3...) 函数对多个数组或多维数组进行排序。
参数	          描述
array1	        必需。规定数组。
sorting order	  可选。规定排列顺序。可能的值：
                      SORT_ASC - 默认。按升序排列 (A-Z)。
                      SORT_DESC - 按降序排列 (Z-A)。
sorting type	  可选。规定排序类型。可能的值：
                      SORT_REGULAR - 默认。把每一项按常规顺序排列（Standard ASCII，不改变类型）。
                      SORT_NUMERIC - 把每一项作为数字来处理。
                      SORT_STRING - 把每一项作为字符串来处理。
                      SORT_LOCALE_STRING - 把每一项作为字符串来处理，基于当前区域设置（可通过 setlocale() 进行更改）。
                      SORT_NATURAL - 把每一项作为字符串来处理，使用类似 natsort() 的自然排序。
                      SORT_FLAG_CASE - 可以结合（按位或）SORT_STRING 或 SORT_NATURAL 对字符串进行排序，不区分大小写。
array2	        可选。规定数组。
array3	        可选。规定数组。
$a=array("Dog","Cat","Horse","Bear","Zebra");
array_multisort($a);
print_r($a); //Array ( [0] => Bear [1] => Cat [2] => Dog [3] => Horse [4] => Zebra )
print_r($a,SORT_DESC); //Array ( [0] => Zebra [1] => Horse [2] => Dog [3] => Cat [4] => Bear )




17）array_pad(array,size,value) 函数将指定数量的带有指定值的元素插入到数组中。并返回新数组。
参数	  描述
array	  必需。规定数组。
size	  必需。规定从函数返回的数组中元素的个数。
value	  必需。规定从函数返回的数组中新元素的值。
$a=array("red","green");
print_r(array_pad($a,5,"blue")); //Array ( [0] => red [1] => green [2] => blue [3] => blue [4] => blue )
print_r(array_pad($a,-5,"blue")); //Array ( [0] => blue [1] => blue [2] => blue [3] => red [4] => green )



18）array_pop() 函数删除数组中的最后一个元素。返回数组的最后一个值。如果数组是空的，或者非数组，将返回 NULL。
$a=array("red","green","blue");
print_r(array_pop($a)); //blue

array_shift();删除数组中的第一个元素，并返回被删除元素的值：
$a=array("red","green","blue");
print_r(array_shift($a)); //red



19）array_push() 函数向第一个参数的数组尾部添加一个或多个元素（入栈），该函数会返回数组中元素的个数。
$a=array("a"=>"red","b"=>"green");
print_r(array_push($a,"blue","yellow")); //4
print_r($a); //Array ( [a] => red [b] => green [0] => blue [1] => yellow )

array_unshift() 函数用于向数组插入新元素。新数组的值将被插入到数组的开头。该函数会返回数组中元素的个数。
被加上的元素作为一个整体添加，这些元素在数组中的顺序和在参数中的顺序一样。
该函数会返回数组中元素的个数。
$a=array("a"=>"red","b"=>"green");
print_r(array_unshift($a,"blue")); //3
print_r($a); //Array ( [0] => blue [a] => red [b] => green )



20）array_product() 函数计算并返回数组的乘积。
$a=array(5,5,2,10);
echo(array_product($a)); //500

array_sum() 函数返回数组中所有值的和。如果所有值都是整数，则返回一个整数值。如果其中有一个或多个值是浮点数，则返回浮点数。
$a=array("a"=>52.2,"b"=>13.7,"c"=>0.9);
echo array_sum($a);//66.8



21）array_rand(array,number) 函数从数组中随机选出一个或多个元素，返回数组中的随机键名。
$a=array("a"=>"red","b"=>"green","c"=>"blue","d"=>"yellow");
print_r(array_rand($a,2)); //Array ( [0] => b [1] => c )



22）array_reduce() 函数向用户自定义函数发送数组中的值，并返回一个字符串。
注释：如果数组是空的且未传递 initial 参数，该函数返回 NULL。
function myfunction($v1,$v2)
{
return $v1 . "-" . $v2;
}
$a=array("Dog","Cat","Horse");
print_r(array_reduce($a,"myfunction")); //-Dog-Cat-Horse



23）array_replace(array1,array2,array3...) 函数使用后面数组的值替换第一个数组的值。
如果一个键存在于 array1 中同时也存在于 array2 中，第一个数组的值将被第二个数组中的值替换：
$a1=array("a"=>"red","b"=>"green");
$a2=array("a"=>"orange","burgundy");
print_r(array_replace($a1,$a2));// ( [a] => orange [b] => green [0] => burgundy )

$a1=array("red","green",'a'=>"a");
$a2=array("blue","yellow",'b'=>"b");
$a3=array("orange","burgundy");
print_r(array_replace($a1,$a2,$a3)); //Array ( [0] => orange [1] => burgundy [a] => a [b] => b )
如果是多维数组：array_replace_recursive() 函数递归地使用后面数组的值替换第一个数组的值。



24）array_reverse(array,preserve) 函数以相反的元素顺序返回数组。
函数将原数组中的元素顺序翻转，创建新的数组并返回。
如果第二个参数指定为 true，则元素的数字索引保持不变，否则索引会重新排序，如果是有键名值的不受影响
$a=array("a"=>"Volvo","b"=>"BMW","c"=>"Toyota");
print_r(array_reverse($a)); //Array ( [c] => Toyota [b] => BMW [a] => Volvo )

$a=array(1=>"Volvo",2=>"BMW",3=>"Toyota");
print_r(array_reverse($a)); //Array ( [0] => Toyota [1] => BMW [2] => Volvo )



25）array_search(value,array,strict) 函数在数组中搜索某个键值，并返回对应的键名。
参数	      描述
value	      必需。规定需要搜素的键值。
array	      必需。规定被搜索的数组。
strict	    可选。如果该参数被设置为 TRUE，则函数在数组中搜索数据类型和值都一致的元素。可能的值：
                true
                false - 默认
                如果设置为 true，则在数组中检查给定值的类型，数字 5 和字符串 5 是不同的
$a=array("a"=>"5","b"=>5,"c"=>"5");
echo array_search(5,$a,true); //b

in_array(value,array,strict)函数的作用与array_search()类似，不同的是，in_array()返回对应的位置索引，从0开始数
echo in_array(5,$a,true); //1




26）array_slice(array,start,length,preserve)array_slice() 函数在数组中根据条件取出一段值，并返回。
参数	      描述
array	      必需。规定数组。
start	      必需。数值。规定取出元素的开始位置。 0 = 第一个元素。
                如果该值设置为正数，则从前往后开始取。
                如果该值设置为负数，则从后向前取 start 绝对值。 -2 意味着从数组的倒数第二个元素开始。
length	    可选。数值。规定被返回数组的长度。
                如果该值设置为整数，则返回该数量的元素。
                如果该值设置为负数，则函数将在举例数组末端这么远的地方终止取出。
                如果该值未设置，则返回从 start 参数设置的位置开始直到数组末端的所有元素。
preserve	  可选。规定函数是保留键名还是重置键名。这是对于数字索引来说，如果是字符串键名则不受影响。可能的值：
                true - 保留键名
                false - 默认。重置键名
$a=array("a"=>"red","b"=>"green","c"=>"blue","d"=>"yellow","e"=>"brown");
print_r(array_slice($a,1,2)); //Array ( [b] => green [c] => blue ) Array ( [0] => green [1] => blue )



27）array_splice(array,start,length,array)函数从数组中移除选定的元素，并用新元素取代它
该函数将返回包含被移除元素的数组
如果函数没有移除任何元素（length=0），则将从 start 参数的位置插入被替换数组（参见例子 2）。
如果是数字索引则不保留被替换数组中的键名。
参数	            描述
array	              必需。规定数组。
start	              必需。数值。规定删除元素的开始位置。
                        0 = 第一个元素。
                        如果该值设置为正数，则从数组中该值指定的偏移量开始移除。
                        如果该值设置为负数，则从数组末端倒数该值指定的偏移量开始移除。
                        -2 意味着从数组的倒数第二个元素开始。
length	            可选。数值。规定被移除的元素个数，也是被返回数组的长度。
                        如果该值设置为正数，则移除该数量的元素。
                        如果该值设置为负数，则移除从 start 到数组末端倒数 length 为止中间所有的元素。
                        如果该值未设置，则移除从 start 参数设置的位置开始直到数组末端的所有元素。
                        如果该值为0，则从 start 参数设置的位置开始插入元素。
array	              可选。规定带有要插入原始数组中元素的数组。
                        如果只有一个元素，则可以设置为字符串，不需要设置为数组。
$a1=array("a"=>"red","b"=>"green","c"=>"blue","d"=>"yellow");
$a2=array("a"=>"purple","b"=>"orange");
print_r(array_splice($a1,0,2,$a2)); //Array ( [a] => red [b] => green )
print_r($a1); //Array ( [0] => purple [1] => orange [c] => blue [d] => yellow )

$a1=array("0"=>"red","1"=>"green");
$a2=array("0"=>"purple","1"=>"orange");
array_splice($a1,1,0,$a2);
print_r($a1); //Array ( [0] => red [1] => purple [2] => orange [3] => green )



28）array_unique() 函数移除数组中的重复的值，并返回结果数组。
当几个数组元素的值相等时，只保留第一个元素，其他的元素被删除。返回的数组中键名不变。
注：被保留的数组将保持第一个数组项的键名类型。
$a=array("a"=>"red","b"=>"green","c"=>"red");
print_r(array_unique($a)); //Array ( [a] => red [b] => green )



29）array_walk() 函数对数组中的每个元素应用用户自定义函数。在函数中，数组的键名和键值是参数。
如果成功则返回 TRUE，否则返回 FALSE。
function myfunction($value,$key)
{
  echo "The key $key has the value $value<br>";
}
$a=array("a"=>"red","b"=>"green","c"=>"blue");
array_walk($a,"myfunction");
The key a has the value red
The key b has the value green
The key c has the value blue

function myfunction($value,$key,$p) //前两个参数是必需，后面参数可传入多个。
{
  echo "$key $p $value<br>";
}
$a=array("a"=>"red","b"=>"green","c"=>"blue");
array_walk($a,"myfunction","has the value");
a has the value red
b has the value green
c has the value blue

如果是多维数组，请使用array_walk_recursive()对数组中的每个成员递归地应用用户函数。



30）排序函数
1）asort() 对关联数组按照键值进行升序排序      sort()按照键值进行升序排序,不保留键名，生成数字索引键名
2) arsort() 对关联数组按照键值进行降序排序     rsort()按照键值进行降序排序,不保留键名，生成数字索引键名
3）ksort() 对关联数组按照键名进行升序排序。
4）krsort() 对数组按照键名逆向排序。
5) uasort() 函数使用用户自定义的比较函数对数组排序，并保持索引关联
6）uksort() 函数通过用户自定义的比较函数对数组按键名进行排序
function my_sort($a,$b)
{
  if ($a==$b) return 0;
  return ($a<$b)?-1:1; //升序 ,如果降序用 return ($a>$b) ? -1 : 1;
}

$arr=array("a"=>4,"b"=>2,"c"=>8,d=>"6");
uasort($arr,"my_sort"); 
print_r($arr); //Array ( [b] => 2 [a] => 4 [d] => 6 [c] => 8 )



31）count() 函数返回数组中元素的数目。
$cars=array("Volvo","BMW","Toyota");
echo count($cars); //3


32）range(low,high,step) 函数创建一个包含指定范围的元素的数组。该函数可创建数字和字母的数组
参数	      描述
low	          必需。规定数组的最低值。
high	        必需。规定数组的最高值。
step	        可选。规定元素之间的步进制。默认是 1。
$number = range(0,50,10);
print_r ($number); //Array ( [0] => 0 [1] => 10 [2] => 20 [3] => 30 [4] => 40 [5] => 50 )
print_r(range('a','e')) //Array ( [0] => a [1] => b [2] => c [3] => d [4] => e )



33）shuffle() 函数把数组中的元素按随机顺序重新排列。
该函数为数组中的元素分配新的索引键名。已有键名将被删除
$my_array = array("a"=>"red","b"=>"green","c"=>"blue","d"=>"yellow","e"=>"purple");
shuffle($my_array);
print_r($my_array);//Array ( [0] => red [1] => purple [2] => blue [3] => yellow [4] => green )



34）list() 函数用于在一次操作中给一组变量赋值。 变量顺序与数组元素顺序对号入座分配值
注：该函数只用于数字索引的数组，且数字索引从 0 开始。
$my_array = array("Dog","Cat","Horse");
list($a, $b, $c) = $my_array;
echo $a.'--'.$b.'--'.$c; //Dog--Cat--Horse
list($d, ,$e) = $my_array;
echo "我在这里只用了 $d 和 $e 变量。"; //我在这里只用了 Dog 和 Horse 变量。



35）compact() 函数创建包含变量名和它们的值的数组。本函数执行的行为与 extract() 正好相反。
注：任何没有变量名与之对应的字符串都被略过。
$firstname = "Bill";
$lastname = "Gates";
$age = "60";
$result = compact("firstname", "lastname", "age");
print_r($result); //Array ( [firstname] => Bill [lastname] => Gates [age] => 60 )

extract() 函数从数组中将变量导入到当前的符号表。
$a = "Original";
$my_array = array("a" => "Cat","b" => "Dog", "c" => "Horse");
extract($my_array);
echo "\$a = $a; \$b = $b; \$c = $c"; //$a = Cat; $b = Dog; $c = Horse












