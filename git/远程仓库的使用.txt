创建远程仓库：git remote add short_name https://github.com/yourname/testpro （short_name为自定义简写）
或直接克隆：git clone remote_url

查看远程仓库： git remote -v
查看详细：git remote show remote_name

修改远程仓库重命名：git remote rename remote_name newpro_name

移除远程仓库：git remote rm remote_name

从远程仓库拉取：git fetch remote_name

合并本地仓库：git merge branch_name testpro/branch_name

从远程仓库拉取数据并合并：git push remote_name

推送到远程仓库：git push remote_name branch_name

从服务器上删除远程分支：git push remote_name --delete branch_name
这个命令做的只是从服务器上移除这个指针

跟踪分支：
从一个远程跟踪分支检出一个本地分支会自动创建一个叫做 “跟踪分支”（有时候也叫做 “上游分支”）。
跟踪分支是与远程分支有直接关系的本地分支。
如果在一个跟踪分支上输入 git pull，Git 能自动地识别去哪个服务器上抓取、合并到哪个分支。
当克隆一个仓库时，它通常会自动地创建一个跟踪 origin/master 的 master 分支
检出一个远程仓库分支到本地分支：git checkout -b branch_name remote_name/branch_name 
对于上面方法还有一个快捷方式：git checkout --track remote_name/branch_name （检出远程仓库分支，本地分支与远程分支同名）
设置已有的本地分支跟踪一个刚刚拉取下来的远程分支，或者想要修改正在跟踪的上游分支，
你可以在任意时间使用 -u 或 --set-upstream-to 选项运行 git branch 来显式地设置。
如当前分支跟踪远程仓库testpro的master分支：git branch -u testpro/master

查看设置的所有跟踪分支：git branch -vv
需要重点注意的一点是这些数字的值来自于你从每个服务器上最后一次抓取的数据。
这个命令并没有连接服务器，它只会告诉你关于本地缓存的服务器数据。
如果想要统计最新的领先与落后数字，需要在运行此命令前抓取所有的远程仓库。
可以像这样做：$ git fetch --all; git branch -vv
