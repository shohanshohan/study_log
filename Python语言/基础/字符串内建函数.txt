1）capitalize() 将字符串的第一个字符转换为大写
str = 'world'
print (str.capitalize()) 打印出 World



2）center(width,fillchar) 返回一个指定长度width的字符串,fillchar为两边填充的字符，如果不指定fillchar默认为空格
str = '指定长度'
print (str.center(10,'a')) 打印出：aaa指定长度aaa



3）count(str, beg= 0,end=len(string))
返回 str 在 string 里面出现的次数，如果 beg 或者 end 指定则返回指定范围内 str 出现的次数
参数
    str -- 这是子串用来进行搜索。
    beg -- 搜索从这一索引。第一个字符从0开始的索引。默认情况下搜索从0开始的索引。
    end -- 搜索从该索引结束。第一个字符从0开始的索引。默认情况下搜索结束的最后一个索引

str = 'abcdefg abcd guyh dhkhg abd'
sub = 'ab'
print (str.count(sub,0,len(str))) 打印出：3 （注：print(str.count(sub))效果一样）



4）Python3 bytes.decode()，encode()方法
str.encode(encoding='UTF-8',errors='strict') 该方法返回编码后的字符串，它是一个 bytes 对象。
bytes.decode(encoding="utf-8", errors="strict") 该方法返回解码后的字符串。
参数
encoding -- 要使用的编码，如"UTF-8"。
errors -- 设置不同错误的处理方案。默认为 'strict',意为编码错误引起一个UnicodeError。 其他可能得值有 'ignore', 'replace', 'xmlcharrefreplace', 'backslashreplace' 以及通过 codecs.register_error() 注册的任何值。

实例：
str = 'abc阿北车'
str_utf8 = str.encode('UTF-8')
str_gbk = str.encode('GBK')

print(str)
print('utf-8 编码:',str_utf8)
print('gbk 编码:',str_gbk)

print('utf-8 解码：',str_utf8.decode('UTF-8','strict'))
print('gbk 解码：',str_gbk.decode('GBK'))

以上实例输出结果如下：
abc阿北车
utf-8 编码: b'abc\xe9\x98\xbf\xe5\x8c\x97\xe8\xbd\xa6'
gbk 编码: b'abc\xb0\xa2\xb1\xb1\xb3\xb5'
utf-8 解码： abc阿北车
gbk 解码： abc阿北车



5）endswith(suffix,start,end)用于判断字符串是否以指定后缀结尾，如果以指定后缀结尾返回True，否则返回False。
参数
suffix -- 该参数可以是一个字符串或者是一个元素。
start -- 字符串中的开始位置。
end -- 字符中结束位置。

str = 'today is beatyfull!!!'
suffix = '!!'
print(str.endswith(suffix)) 打印出：True
print(str.endswith(suffix,0,10)) 打印出：False

相应的startswith(suffix,start,end) 方法用于检查字符串是否是以指定子字符串开头，如果是则返回 True，否则返回 False。



6）expandtabs(tabsize=8) 把字符串中的 tab 符号('\t')转为空格，tab 符号('\t')默认的空格数是 8 
参数
tabsize -- 指定转换字符串中的 tab 符号('\t')转为空格的字符数。

str = 'this is\tstring example....!'
print('原始字符串：' + str) #打印出：原始字符串: this is     string example....!
print('替换 \\t 符号：' + str.expandtabs()) #打印出：替换 \t 符号: this is string example....!
print('使用16个空格替换 \\t 符号：' + str.expandtabs(16))
#打印出：使用16个空格替换 \t 符号: this is         string example....!



7）find(str,beg=0,end=len(string))检测字符串中是否包含子字符串 str 
如果指定范围内如果包含指定索引值，返回的是索引值在字符串中的起始位置(索引值)。如果不包含索引值，返回-1。
参数
str -- 指定检索的字符串
beg -- 开始索引，默认为0。
end -- 结束索引，默认为字符串的长度。

str = 'this is\tstring example....!'
substr = 'example'
print(str.find(substr)) #打印出：15
print(str.find(substr,25)) #打印出：-1
print(str.find(substr,0,12)) #打印出：-1



8）index(str,beg=0,end=len(string))跟find()方法一样，只不过如果str不在字符串中会报一个异常.
rindex(str,beg=0,end=len(string))类似于 index()，不过是从右边开始.




9）isalnum() 如果 string 至少有一个字符并且所有字符都是字母或数字则返回 True,否则返回 False
str = '2018来了'
print(str.isalnum()) #True 中文也返回True
str2 = 'this day is 01'
print(str2.isalnum()) #False
str3 = 'abc123'
print(str3.isalnum()) #True



10）isalpha() 如果字符串至少有一个字符并且所有字符都是字母则返回 True, 否则返回 False
str = '来了'
print(str.isalpha()) #True
str2 = 'this01'
print(str2.isalpha()) #False
str3 = 'abc'
print(str3.isalpha()) #True
str4 = 'a b c'
print(str4.isalpha()) #False




11）isdigit() 如果字符串只包含数字则返回 True 否则返回 False
str = '来了'
print(str.isdigit()) #False
str2 = 'this01'
print(str2.isdigit()) #False
str3 = '123456'
print(str3.isdigit()) #True
str4 = '123 456'
print(str4.isdigit()) #False



12）islower() 
如果字符串中包含至少一个区分大小写的字符，并且所有这些字符都是小写即没有大写字母，则返回 True，否则返回 False
str1 = 'a123 456 好'
print(str1.islower()) #True
str2 = 'this01'
print(str2.islower()) #True
str3 = 'This01'
print(str3.islower()) #False
str4 = 'this is num'
print(str4.islower()) #True




13）isnumeric() 如果字符串中只包含数字字符，则返回 True，否则返回 False
str1 = 'a123 456 好'
print(str1.isnumeric()) #False
str2 = '0123'
print(str2.isnumeric()) #True
str3 = '123 456'
print(str3.isnumeric()) #False



14）isspace() 如果字符串中只包含空白，则返回 True，否则返回 False.
str1 = ''
print(str1.isspace()) #False
str2 = '  '
print(str2.isspace()) #True




15）istitle() 如果字符串中所有的单词拼写首字母是大写，且其他字母为小写则返回 True，否则返回 False.
str1 = 'This Is String'
print(str1.istitle()) #True
str2 = 'This is string'
print(str2.istitle()) #False
str3 = 'This Is 001 002'
print(str3.istitle()) #True




16）isupper() 
如果字符串中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是大写，则返回 True，否则返回 False
str1 = 'THIS IS ME'
print(str1.isupper()) #True
str2 = 'This is string'
print(str2.isupper()) #False
str3 = 'THIS IS 001 002'
print(str3.isupper()) #True




17）join(seq)用于将序列中的元素以指定的字符连接生成一个新的字符串。
参数
seq -- 要连接的元素序列.

s1 = '-'
s2 = ""
seq = ('H','e','l','l','o') # 字符串序列
print(s1.join(seq)) # H-e-l-l-o
print(s2.join(seq)) # Hello




18）len(string) 返回字符串长度
str = 'hello'
print(len(str)) # 5




19）ljust(width,fillchar) 
返回一个原字符串左对齐,指定长度并填充指定字符到右边的新字符串。如果指定的长度小于原字符串的长度则返回原字符串。
参数
width -- 指定字符串长度。
fillchar -- 填充字符，默认为空格。

str = 'hello world' #长度为11
print(str.ljust(14,'!')) # hello world!!!



20）rjust(width,fillchar)返回一个原字符串右对齐,并使用fillchar(默认空格）填充至长度 width 的新字符串
与ljust类似，填充的方向相反




21）lower() 将字符串中所有大写字符转换为小写后生成的字符串。
str = 'Hello World AAA'
print(str.lower()) #hello world aaa




22）lstrip(chars) 删除字符串左边的指定字符（默认为空格）
    rstrip(chars) 删除字符串右边的指定字符（默认为空格）
    strip(chars)  在字符串上执行 lstrip()和 rstrip()
参数
chars --指定截取的字符(默认为空格)。

str = '  Hello World AAA'
print(str) #  Hello World AAA
print(str.lstrip()) #Hello World AAA
print(str.rstrip('A')) #  Hello World
str1 = '   aaa bbb   '
print(str1.strip()) #aaa bbb



23）maketrans(intab,outtab) 
用于创建字符映射的转换表,
第一个参数是字符串，表示需要转换的字符，第二个参数也是字符串表示转换的目标。
两个字符串的长度必须相同，为一一对应的关系。
参数
intab -- 字符串中要替代的字符组成的字符串。
outtab -- 相应的映射字符的字符串。

str = 'Hello World AAA'
intab = 'eoA'
outtab = '586'
trantab = str.maketrans(intab,outtab)

print(str.translate(trantab)) 打印出：H5llo w8rld 666




24）translate(trantab) 根据参数trantab给出的表(包含 256 个字符)转换字符串的字符,如上



25）max(str) 返回字符串 str 中最大的字母。
str = 'Hello World AAA'
print('最大字符：' + max(str)) #r



26）min(str) 返回字符串中最小的字母。注：字符串中如果有空格的话，会返回一个空
str = 'HelloWorldAAA'
print('最小字符：' + min(str)) #A




27）replace(old,new,max) 
把字符串中的 old（旧字符串） 替换成 new(新字符串)，如果指定第三个参数max，则替换不超过 max 次
参数
old -- 将被替换的子字符串。
new -- 新字符串，用于替换old子字符串。
max -- 可选字符串, 替换不超过 max 次

str = 'old string'
newstr = str.replace('old','new')
print(newstr) #new string

str1 = 'this is is is is is is what!'
str1New = str1.replace('is','was',3)
print(str1New) #thwas was was is is is what!




28）rfind(str,beg=0,end=len(string))类似于 find()函数，不过是从右边开始查找.注：从0开始索引
返回字符串最后一次出现的位置，如果没有匹配项则返回-1。
find(str,beg=0,end=len(string))返回字符串第一次出现的位置，如果没有匹配项则返回-1。

str = 'this is is is is is is what!'
substr = 'is'
print(str.rfind(substr)) #打印出20（最后出现的索引位置）
print(str.find(substr)) #打印出2（第一次出现的索引位置）




29）split(str=' ',num=string.count(str)) 
split()通过指定分隔符对字符串进行切片，如果参数num 有指定值，则仅分隔 num 个子字符串,返回分割后的字符串列表。
参数
str -- 分隔符，默认为所有的空字符，包括空格、换行(\n)、制表符(\t)等。
num -- 分割次数。

str = "this is string example....wow!!!"
print (str.split( ))
print (str.split('i',1))
print (str.split('w'))
以上实例输出结果如下：
['this', 'is', 'string', 'example....wow!!!']
['th', 's is string example....wow!!!']
['this is string example....', 'o', '!!!']




30）splitlines(keepends)
按照行('\r', '\r\n', \n')分隔，返回一个包含各行作为元素的列表，
如果参数 keepends 为 False，不包含换行符，如果为 True，则保留换行符。
str = 'this \n\nis is \ris is is \nis what!'
print(str.splitlines())
print(str.splitlines(True))
结果如下：
['this ', '', 'is is ', 'is is is ', 'is what!']
['this \n', '\n', 'is is \r', 'is is is \n', 'is what!']




31）swapcase() 将字符串中大写转换为小写，小写转换为大写
str = 'aaA BBb CCc'
print(str.swapcase()) #AAa bbB ccC




32）title() 返回"标题化"的字符串,就是说所有单词都是以大写开始，其余字母均为小写
str = 'this is string'
print(str.title()) #This Is String




33）upper()返回小写字母转为大写字母的字符串。原来是大写的则不变
str = 'This is string'
print(str.upper()) #THIS IS STRING




34）zfill(width) 返回指定长度的字符串，原字符串右对齐，前面填充0。
str = 'hello'
print(str.zfill(10)) #00000hello





35）isdecimal() 检查字符串是否只包含十进制字符。这种方法只存在于unicode对象。
如果字符串是否只包含十进制字符返回True，否则返回False。
注意:定义一个十进制字符串，只需要在字符串前添加 'u' 前缀即可。
str = "runoob2016"
print (str.isdecimal())

str = "23443434"
print (str.isdecimal())
以上实例输出结果如下：
False
True














