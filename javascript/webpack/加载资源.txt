（1）如果要加载css和图片资源，首先要安装扩展
npm install --save-dev style-loader css-loader  //加载css扩展
npm install --save-dev file-loader //加载图片文件扩展,加载字体文件也用这个
npm install --save-dev csv-loader xml-loader //加载数据 excel或xml

（2）安装好插件后，修改配置文件 webpack.config.js
加入需要运行的模块选项，如：
module: {
  	rules: [
  		{
	  		test: /\.css$/,
	  		use: [
	  			'style-loader',
	  			'css-loader'
	  		]
	  	}
  	]
  }
上面的意思是：当遇到以.css结尾的文件被引入的时候，运行style-loader和css-loader插件功能，把样式加载到脚本的<head>标签中

整个webpack.config.js文件内容可能是这样的：
const path = require('path');

  module.exports = {
    entry: './src/index.js',
    output: {
      filename: 'bundle.js',
      path: path.resolve(__dirname, 'dist')
    },
    module: {
      rules: [
        {
          test: /\.css$/,
          use: [
            'style-loader',
            'css-loader'
          ]
        },
       {
         test: /\.(png|svg|jpg|gif)$/,
         use: [
           'file-loader'
         ]
       }，
       {
       	test: /\.(woff|woff2|eot|ttf|otf)$/,
         use: [
           'file-loader'
         ]
       },
       {
         test: /\.(csv|tsv)$/,
         use: [
           'csv-loader'
         ]
       },
       {
         test: /\.xml$/,
         use: [
           'xml-loader'
         ]
       }
      ]
    }
  };
  
  （3）添加好配置后，在你的入口文件（上面配置中是'./src/index.js'）引入相关资源就可以了
  如：import './style.css';
  import './demo.jpg';
  
  （4）运行构建命令：npm run build（构建命令也可以在package.json中script选项中配置不同的）这样就可以了，index.html中可以应用构建的资源
  
 全局资源
 上述所有内容中最出色之处是，以这种方式加载资源，你可以以更直观的方式将模块和资源组合在一起。
 无需依赖于含有全部资源的 /assets 目录，而是将资源与代码组合在一起。例如，类似这样的结构会非常有用：
+ |– /components
+ |  |– /my-component
+ |  |  |– index.jsx
+ |  |  |– index.css
+ |  |  |– icon.svg
+ |  |  |– img.png
这种配置方式会使你的代码更具备可移植性，因为现有的统一放置的方式会造成所有资源紧密耦合在一起。
假如你想在另一个项目中使用 /my-component，只需将其复制或移动到 /components 目录下。
只要你已经安装了任何扩展依赖(external dependencies)，并且你已经在配置中定义过相同的 loader，那么项目应该能够良好运行。
