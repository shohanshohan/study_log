很多事件是javascript事件去了on字符，并且在jquery下都是函数方法而不是对象属性
（一）向元素添加或删除事件
（1）on()	
向元素添加事件处理程序
$('div h3').on('click', function(){...});
上面等同于：$('div').on('click','h3',function(){...}); 也可以用具体的函数代替function(){...},如：$('div h3').on('click',test);

（2）off()	
移除通过 on() 方法添加的事件处理程序
移除所有 <p> 元素上的 click 事件：
$("p").off("click");

（3）one()	
向被选元素添加一个或多个事件处理程序。该处理程序只能被每个元素触发一次



（二）鼠标事件
（1）mouseenter()，mouseleave()
当鼠标指针穿过（进入）被选元素时，会发生 mouseenter 事件。对应的是 mouseleave()事件，当鼠标指针离开被选元素时触发
与 mouseover 事件不同，mouseenter 事件只有在鼠标指针进入被选元素时被触发，mouseover 事件在鼠标指针进入任意子元素时也会被触发。
也就是说要支持冒泡事件就用 mouseover

（2）mouseover(), mouseout()
当鼠标指针位于元素上时，会发生 mouseover 事件。对应的是 mouseout()事件，当鼠标指针离开被选元素时触发

（3）mousedown(), mouseup()  鼠标左键按下松开
当鼠标指针移动到元素上方，并按下鼠标左键时，会发生 mousedown 事件, 相应的当松开鼠标左键时，会发生 mouseup() 事件

（4）contextmenu()
当右击鼠标时触发，

（5）click()，dblclick()
当单击元素时，发生 click 事件, 当双击元素时，触发 dblclick 事件。
注意：dblclick 事件也会产生 click 事件。如果这两个事件都被应用于同一个元素，则会产生问题。

（6）hover()
当鼠标指针悬停在被选元素上时要运行的两个函数方法触发 mouseenter 和 mouseleave 事件, hover(function1, function2);
如果只指定一个函数，则 mouseenter 和 mouseleave 都执行它。

（7）scroll()
当用户滚动指定的元素时，会发生 scroll 事件。这是在指定元素上不是浏览器窗口
元素框被设置样式 overflow:scroll; 超出元素框大小会显示滚动条



（三）键盘事件
（1）keydown()
当键盘键被按下时发生 keydown 事件。
使用 event.which 属性来返回哪个键盘键被按下。这在javascript原生里是属性 event.keyCode
如： （如果忘记了键盘键的 keyCode 可以用这个例子来获取）
<input type="text">
<script>
  $('input').keydown(function(event){
      $(this).val(event.which);
  });
</script>

（2）keyup()
当键盘键被松开时发生 keyup 事件



（四）表单事件
（1）focus(), blur()
当元素获得焦点时（当通过鼠标点击选中元素或通过 tab 键定位到元素时），发生 focus 事件
对应的，当元素失去焦点时发生 blur 事件。

（2）change()
当元素的值改变时发生 change 事件（仅适用于表单字段）。
注意：当用于 select 元素时，change 事件会在选择某个选项时发生。当用于 text input 或 text area 时，change 事件会在元素失去焦点时发生。

（3）focusin(), focusout()
当元素（或在其内的任意元素）获得焦点时发生 focusin 事件。该方法在任意子元素获得焦点时也会触发。
当元素（或在其内的任意元素）失去焦点时发生 focusout 事件。

（4）submit(), resize(
当提交表单时，会发生 submit 事件，该事件只适用于 <form> 元素

（5）select()
当 textarea 或文本类型的 input 元素中的文本被选择（标记）时，会发生 select 事件。


五（全局事件）
（1）ready()
当 DOM（document object model 文档对象模型）加载完毕且页面完全加载（包括图像）时发生 ready 事件。
$(document),ready(function(){
});
用 $(function(){ }) 代替，更简单

（2）resize()
当调整浏览器窗口大小时，发生 resize 事件。

（3）trigger() , triggerHandler()
trigger() 方法触发被选元素上指定的事件以及事件的默认行为
trigger() 会操作 jQuery 对象匹配的所有元素，而 triggerHandler() 只影响第一个匹配元素。
由 triggerHandler() 创建的事件不会在 DOM 树中冒泡；如果目标元素不直接处理它们，则不会发生任何事情
$( "#old" ).click(function() {
  $( "input" ).trigger( "focus" );
});
$( "#new" ).click(function() {
  $( "input" ).triggerHandler( "focus" );
});
$( "input" ).focus(function() {
  $( "<span>获取焦点!</span>" ).appendTo( "body" ).fadeOut( 1000 );
});




（六）event 事件属性，用来事件判断
$('button').click(function(event){
  alert(event.target);
});
event.currentTarget	在事件冒泡阶段内的当前 DOM 元素
event.data	包含当前执行的处理程序被绑定时传递到事件方法的可选数据
event.delegateTarget	返回当前调用的 jQuery 事件处理程序所添加的元素
event.isDefaultPrevented()	返回指定的 event 对象上是否调用了 event.preventDefault()
event.isImmediatePropagationStopped()	返回指定的 event 对象上是否调用了 event.stopImmediatePropagation()
event.isPropagationStopped()	返回指定的 event 对象上是否调用了 event.stopPropagation()
event.namespace	返回当事件被触发时指定的命名空间
event.pageX	返回相对于文档左边缘的鼠标位置
event.pageY	返回相对于文档上边缘的鼠标位置
event.preventDefault()	阻止事件的默认行为
event.relatedTarget	返回当鼠标移动时哪个元素进入或退出
event.result	包含由被指定事件触发的事件处理程序返回的最后一个值
event.stopImmediatePropagation()	阻止其他事件处理程序被调用
event.stopPropagation()	阻止事件向上冒泡到 DOM 树，阻止任何父处理程序被事件通知
event.target	返回哪个 DOM 元素触发事件
event.timeStamp	返回从 1970 年 1 月 1 日到事件被触发时的毫秒数
event.type	返回哪种事件类型被触发
event.which	返回指定事件上哪个键盘键或鼠标按钮被按下
event.metaKey	事件触发时 META 键是否被按下


