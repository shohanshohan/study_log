HTML 事件是发生在 HTML 元素上的事情。
当在 HTML 页面中使用 JavaScript 时， JavaScript 可以触发这些事件。
HTML 事件可以是浏览器行为，也可以是用户行为。

如：
<button onclick="this.innerHTML=Date()">现在的时间是</button>

事件通常与函数结合使用，函数不会在事件发生前被执行！

常见的HTML事件：

一：框架/对象（Frame/Object）事件

（1）onload：onload 事件会在页面或图像加载完成后立即发生
onload 通常用于 <body> 元素，在页面完全载入后(包括图片、css文件等等。)执行脚本代码。
如,在 HTML 中：
<body onload="alert('onload event')">
....
</body>
如在 JavaScript 中:
<script>
  window.onload=function(){
    alert('onload event');
  }
</script>
所有主要浏览器都支持 onload 事件
以下 HTML 标签支持 onload :
<body>, <frame>, <frameset>, <iframe>, <img>, <input type="image">, <link>, <script>, <style>

（2）onunload：onunload 事件在用户退出页面时发生。
onunload 发生于当用户离开页面时发生的事件(通过点击一个连接，提交表单，关闭浏览器窗口等等。)
用法与onload一样，不过跳转页面可能看不到效果
以下 HTML 标签支持 onunload :
<body>, <frameset>

（3）onerror：onerror 事件在加载外部文件（文档或图像）发生错误时触发。
如：
<img src="image.gif" onerror="document.getElementById('demo').innerHTML = '无法加载图片'">
事件逻辑代码多一般使用函数：
<img id="myImg" src="image.gif" onerror="myFunction()">
<script>
  function myFunction(){
    document.getElementById('demo').innerHTML = '无法加载图片';
  }
  或者直接指定HTML元素：
  document.getElementById("myImg").onerror = function() {myFunction()};
</script>
onerror支持的 HTML 标签:	<img>, <input type="image">, <object>, <script>, <style>

（3）onpageshow：onpageshow 事件在用户浏览网页时触发
onpageshow 事件类似于 onload 事件，onload 事件在页面第一次加载时触发， onpageshow 事件在每次加载页面时触发，
即 onload 事件在页面从浏览器缓存中读取时不触发。
用法同onload。支持的 HTML 标签:	<body>
可以使用 对象的 persisted 属性来判断页面是直接从服务器上载入还是从缓存中读取
<body onpageshow="myFunction(event)">
.......
</body>
<script>
function myFunction(event) { 
    alert("页面是否从浏览器缓存中加载? " + event.persisted); // event.persisted返回bool值
}
或者不在<body>标签中指定，通过window属性指定（效果一样）：
window.onpageshow = function(){
  myFunction(event);
}
</script>

（4）onpagehide：onpagehide 事件在用户离开网页时触发。
离开网页有多种方式。如点击一个链接，刷新页面，提交表单，关闭浏览器等。
onpagehide 事件有时可以替代 onunload 事件，但 onunload 事件触发后无法缓存页面。
用法同 onpageshow，支持的 HTML 标签:	<body>

（5）onresize：onresize 事件会在窗口或框架被调整大小时发生。
如：
<script>
  function myFunction(){
    var w = window.outerWidth;
    var h = window.outerHeight;
    var txt = '窗口大小（像素）：宽=' + w + ', 高=' + h;
    document.getElementById('demo').innerHTML = txt
  }
  window.onresize = function(){
    myFunction();
  }
</script>
以下 HTMl 标签支持 onresize事件:
<a>, <address>, <b>, <big>, <blockquote>, <body>, <button>, <cite>, <code>, <dd>, <dfn>, <div>, <dl>, <dt>, <em>, <fieldset>, 
<form>, <frame>, <h1> to <h6>, <hr>, <i>, <img>, <input>, <kbd>, <label>, <legend>, <li>, <object>, <ol>, <p>, <pre>, 
<samp>, <select>, <small>, <span>, <strong>, <sub>, <sup>, <table>, <textarea>, <tt>, <ul>, <var>

（6）onscroll：onscroll 事件在元素滚动条在滚动时触发
注：这个是HTML元素滚动条滚动时触发，不是浏览器页面滚动
如：
<div style="border: 1px solid red;width:10px;height:100px;overflow: scroll;" onscroll="myFunction()">
		<p>demo</p>
		<p>demo</p>
		<p>demo</p>
		<p>demo</p>
		<p>demo</p>
	</div>
	<div id="demo"></div>
  <script>
    var x = 0;
    function myFunction(){
      document.getElementById('demo').innerHTML = x += 1;
    }
  </script>
 支持的 HTML 标签:	<address>, <blockquote>, <body>, <caption>, <center>, <dd>, <dir>, <div>, <dl>, <dt>, <fieldset>, <form>, 
 <h1> - <h6>, <html>, <li>, <menu>, <object>, <ol>, <p>, <pre>, <select>, <tbody>, <textarea>, <tfoot>, <thead>, <ul>
  
  
  
  
  二：鼠标事件（点击，双击，右击，移动到元素，移开元素，按下鼠标，松开鼠标）
  
  （1）onclick：onclick 事件会在元素被点击时发生
如：
<body>
	<button id='btn'>点我</button>
	<div id="demo"></div>
</body>
<script>
	function myFunction()
	{
		document.getElementById('demo').innerHTML = '你点击了按钮';
	} 
	document.getElementById('btn').onclick = function(){ //也可以在标签中指定更方便：<div id='demo' onclick="myFunction()"></div>
		myFunction();
	}
</script>
onclick 属性可以使用与所有 HTML 元素，除了 ：<base>, <bdo>, <br>, <head>, <html>, <iframe>, <meta>, <param>, <script>, <style>, 和 <title>.

（2）oncontextmenu：oncontextmenu 事件在元素中用户右击鼠标时触发
用法同 onclick 一样，支持的 HTML 标签:	所有 HTML 元素

（3）ondblclick：ondblclick 事件会在元素被双击时发生
用法和支持的HTML标签都和 onclick 一样。

（4）onmousedown 事件会在鼠标按键被按下时发生，相反的，onmouseup 事件会在鼠标按键被松开时发生
用法和支持的HTML标签都和 onclick 一样。
与 onmousedown 事件相关连得事件发生次序（ 鼠标左侧/中间 按钮）：
1，onmousedown
2，onmouseup
3，onclick

（5）onmouseenter 事件在鼠标指针移动到元素上时触发，相反的，onmouseleave 事件在鼠标移开元素时触发
  用法和支持的HTML标签都和 onclick 一样。
  
（6）onmousemove 事件会在鼠标指针移到指定的对象时发生，相反的，onmouseout 事件在鼠标移开元素时触发
这一对事件和 onmouseenter/onmouseleave 事件效果一样的，使用方法也一样，onmousemove 还可以用 onmouseover代替，效果一样




三：键盘事件（按下键，按下并松开，松开键）

（1）onkeydown 事件会在用户按下一个键盘（任一键）按键时发生。
当被选中的元素监听该事件时触发
如：
<input type="text" onkeydown="document.getElementById('demo').innerHTML = '你按了键盘键'">
onkeydown 属性可用于所有的 HTML 元素，除了：<base>, <bdo>, <br>, <head>, <html>, <iframe>, <meta>, <param>, <script>, <style>, 和 <title>.

（2）onkeypress 事件会在键盘按键被按下并释放一个键时发生
用法同上

（3）onkeyup 事件会在键盘按键被松开时发生
用法同上
与onkeyup 事件相关的事件发生次序：
onkeydown
onkeypress
onkeyup

要获取具体的键盘指定键，可用指定键的数字索引区分，用switch语句来判断
document.onkeydown=function(event){
     switch(event.keyCode){
	case 27:
		alert('这是Esc按键');
		break;
	case 113:
		alert('F2按键');
		break;
	case 13:
		alert('Enter按键');
		break;
	......
    }
}; 
键盘事件对应的键码请查看，js键盘事件对应的键码.txt
如果不记得对应的 keyCode 码，把上面代码改一下即可打印出任一键的 keyCode 了
document.onkeydown = function(event){
   alert(event.keyCode);
}




四：表单事件（获得焦点，失去焦点，内容改变，表单重置，表单提交，搜索事件，选中文本）

（1）onfocus 事件在对象获得焦点时发生。onfocus 通常用于 <input>, <select>, 和<a>.
<input type="text" onfocus="myFunction(this)">
<script>
  function myFunction(obj)
  {
     obj.setAttribute("placeholder",'请输入账号');
  } 
</script>

（2）onblur 事件会在对象失去焦点时发生, 经常用于Javascript验证代码，一般用于表单输入框
如：
<input type="text" onblur="myFunction(this)">
<script>
	function myFunction(obj)
	{
		if(obj.value==''){
			document.getElementById('demo').innerHTML = '请输入';
		}else{
			document.getElementById('demo').innerHTML = '';
			obj.value = obj.value.toUpperCase();
		}
	} 
</script>

（3）onchange 事件会在域的内容改变时发生，onchange 事件也可用于单选框与复选框改变后触发的事件
<input type="text" onchange="myFunction()">
<script>
	function myFunction()
	{
		alert('内容改变了');
	} 
</script>
onchange 属性可以使用于： <input>, <select>, 和 <textarea>。

（4）onfocusin 事件在一个元素即将获得焦点时触发。
 onfocusin 事件类似于 onfocus 事件。主要的区别是 onfocus 事件不支持冒泡。因此，如果想知道元素或者其子元素是否获取焦点，需要使用 onfocusin 事件。
 用法同上
 对应的 onfocusout 事件在元素即将失去焦点时触发
 
 （5）oninput 事件在用户输入时触发。
 如：
<div id="demo"></div>
<input type="text" oninput="myFunction(this)">
<script>
	function myFunction(obj)
	{
		document.getElementById('demo').innerHTML = obj.value;
	} 
</script>
持的 HTML 标签:<input type="password">, <input type="search">, <input type="text"> 和 <textarea>
该事件类似于 onchange 事件。不同之处在于 oninput 事件在元素值发生变化时立即触发， onchange 在元素失去焦点时触发。
另外一点不同是 onchange 事件也可以作用于 <keygen> 和 <select> 元素。

（6）onreset 事件在表单被重置后触发。
如：
<form onreset="myFunction()">
	<input type="text">
	<input type="reset"> <!--重置按钮-->
</form>
<script>
	function myFunction()
	{
		document.getElementById('demo').innerHTML = '表单已重置';
	} 
</script>
支持的 HTML 标签: <form>, <keygen>

（7）onsearch 事件在用户按下"ENTER（回车）" 按键或点击 type="search" 的 <input> 元素的 "x(搜索)" 按钮时触发
用法同 oninput ，只用于type="search"
支持的 HTML 标签:	<input type="search">

（8）onselect 事件会在文本框中的文本被选中时发生
在input框输入内容，并用鼠标点击拖选一些文本时触发该事件
onselect 属性可用于: <input type="file">, <input type="password">, <input type="text">, <input type="search">, <keygen>, 和 <textarea>.

（9）onsubmit 事件在表单提交时触发。
提交按钮<input type="submit" value="提交">， 用法同 onreset 事件
支持的 HTML 标签: <form>, <keygen>



还有一些事件方法平时不是很常用，不一一详细
五：剪贴板事件
属性	描述	DOM
oncopy	该事件在用户拷贝元素内容时触发	 
oncut	该事件在用户剪切元素内容时触发	 
onpaste	该事件在用户粘贴元素内容时触发

六：打印事件
属性	描述	DOM
onafterprint	该事件在页面已经开始打印，或者打印窗口已经关闭时触发	 
onbeforeprint	该事件在页面即将开始打印时触发

七：拖动事件
事件	描述	DOM
ondrag	该事件在元素正在拖动时触发	 
ondragend	该事件在用户完成元素的拖动时触发	 
ondragenter	该事件在拖动的元素进入放置目标时触发	 
ondragleave	该事件在拖动元素离开放置目标时触发	 
ondragover	该事件在拖动元素在放置目标上时触发	 
ondragstart	该事件在用户开始拖动元素时触发	 
ondrop	该事件在拖动元素放置在目标区域时触发

八：多媒体（Media）事件
事件	描述	DOM
onabort	事件在视频/音频（audio/video）终止加载时触发。	 
oncanplay	事件在用户可以开始播放视频/音频（audio/video）时触发。	 
oncanplaythrough	事件在视频/音频（audio/video）可以正常播放且无需停顿和缓冲时触发。	 
ondurationchange	事件在视频/音频（audio/video）的时长发生变化时触发。	 
onemptied	当期播放列表为空时触发	 
onended	事件在视频/音频（audio/video）播放结束时触发。	 
onerror	事件在视频/音频（audio/video）数据加载期间发生错误时触发。	 
onloadeddata	事件在浏览器加载视频/音频（audio/video）当前帧时触发触发。	 
onloadedmetadata	事件在指定视频/音频（audio/video）的元数据加载后触发。	 
onloadstart	事件在浏览器开始寻找指定视频/音频（audio/video）触发。	 
onpause	事件在视频/音频（audio/video）暂停时触发。	 
onplay	事件在视频/音频（audio/video）开始播放时触发。	 
onplaying	事件在视频/音频（audio/video）暂停或者在缓冲后准备重新开始播放时触发。	 
onprogress	事件在浏览器下载指定的视频/音频（audio/video）时触发。	 
onratechange	事件在视频/音频（audio/video）的播放速度发送改变时触发。	 
onseeked	事件在用户重新定位视频/音频（audio/video）的播放位置后触发。	 
onseeking	事件在用户开始重新定位视频/音频（audio/video）时触发。	 
onstalled	事件在浏览器获取媒体数据，但媒体数据不可用时触发。	 
onsuspend	事件在浏览器读取媒体数据中止时触发。	 
ontimeupdate	事件在当前的播放位置发送改变时触发。	 
onvolumechange	事件在音量发生改变时触发。	 
onwaiting	事件在视频由于要播放下一帧而需要缓冲时触发。

九：动画事件
事件	描述	DOM
animationend	该事件在 CSS 动画结束播放时触发	 
animationiteration	该事件在 CSS 动画重复播放时触发	 
animationstart	该事件在 CSS 动画开始播放时触发

十：过渡事件
事件	描述	DOM
transitionend	该事件在 CSS 完成过渡后触发（transition:）

其他事件
事件	描述	DOM
onmessage	该事件通过或者从对象(WebSocket, Web Worker, Event Source 或者子 frame 或父窗口)接收到消息时触发	
ononline	该事件在浏览器开始在线工作时触发。	 
onoffline	该事件在浏览器开始离线工作时触发。	 
onpopstate	该事件在窗口的浏览历史（history 对象）发生改变时触发。	 
onshow	该事件当 <menu> 元素在上下文菜单显示时触发	 
onstorage	该事件在 Web Storage(HTML 5 Web 存储)更新时触发	 
ontoggle	该事件在用户打开或关闭 <details> 元素时触发	 
onwheel	该事件在鼠标滚轮在元素上下滚动时触发


鼠标/键盘事件对象（event.altKey==true|false）
属性
属性	描述	DOM
altKey	返回当事件被触发时，"ALT" 是否被按下。	2
button	返回当事件被触发时，哪个鼠标按钮被点击。	2
clientX	返回当事件被触发时，鼠标指针的水平坐标。	2
clientY	返回当事件被触发时，鼠标指针的垂直坐标。	2
ctrlKey	返回当事件被触发时，"CTRL" 键是否被按下。	2
Location	返回按键在设备上的位置	3
charCode	返回onkeypress事件触发键值的字母代码。	2
key	在按下按键时返回按键的标识符。	3
keyCode	返回onkeypress事件触发的键的值的字符代码，或者 onkeydown 或 onkeyup 事件的键的代码。	2
which	返回onkeypress事件触发的键的值的字符代码，或者 onkeydown 或 onkeyup 事件的键的代码。	2
metaKey	返回当事件被触发时，"meta" 键是否被按下。	2
relatedTarget	返回与事件的目标节点相关的节点。	2
screenX	返回当某个事件被触发时，鼠标指针的水平坐标。	2
screenY	返回当某个事件被触发时，鼠标指针的垂直坐标。	2
shiftKey	返回当事件被触发时，"SHIFT" 键是否被按下。	2


